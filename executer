<!DOCTYPE html>
<html lang="es">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<title>WebRTC Cámara – Emisor / Viewer</title>
<style>
  body{font-family:system-ui,-apple-system,Segoe UI,Roboto,Inter,Helvetica,Arial,sans-serif;margin:0;padding:16px;background:#0b0f14;color:#e6eef8}
  .card{max-width:980px;margin:0 auto;background:#121922;border:1px solid #1e2a36;border-radius:14px;padding:16px}
  h1{margin:0 0 12px;font-size:20px}
  .row{display:flex;gap:12px;flex-wrap:wrap;margin:10px 0}
  label{font-size:14px;opacity:.9}
  select,input,button{background:#0f151d;color:#e6eef8;border:1px solid #2a3a4d;border-radius:10px;padding:8px 10px}
  button{cursor:pointer}
  button.primary{background:#1d6fff;border-color:#2a72ff}
  video{width:100%;max-height:70vh;background:#000;border-radius:12px}
  .hint{font-size:12px;opacity:.8}
  .url{font-family:ui-monospace,SFMono-Regular,Menlo,Consolas,monospace;background:#0f151d;border:1px dashed #2a3a4d;padding:8px;border-radius:10px;word-break:break-all}
  .ok{color:#7be59b} .warn{color:#ffd166} .err{color:#ff6b6b}
</style>
</head>
<body>
<div class="card">
  <h1>WebRTC Cámara – Emisor / Viewer</h1>

  <div class="row">
    <label>Rol:</label>
    <select id="role">
      <option value="emitter">Emisor (envía cámara)</option>
      <option value="viewer">Viewer (sólo ve)</option>
    </select>

    <label> Sala:</label>
    <input id="room" placeholder="p.ej. casa1" />

    <button id="start" class="primary">Iniciar</button>
    <button id="stop" disabled>Detener</button>
  </div>

  <div class="row" id="emitterOpts" style="display:none">
    <label>Cámara:</label>
    <select id="cameraSelect"></select>
    <label><input type="checkbox" id="mirror" checked /> Espejo (selfie)</label>
    <label><input type="checkbox" id="sendAudio" /> Enviar audio</label>
  </div>

  <p class="hint">Comparte este link con el Viewer cuando seas Emisor:</p>
  <div id="shareUrl" class="url"></div>

  <video id="video" autoplay playsinline muted></video>
  <p id="status" class="hint"></p>
</div>

<!-- Firebase compat SDKs -->
<script src="https://www.gstatic.com/firebasejs/9.23.0/firebase-app-compat.js"></script>
<script src="https://www.gstatic.com/firebasejs/9.23.0/firebase-firestore-compat.js"></script>

<script>
(async () => {
  // ========= Configuración de tu proyecto Firebase =========
  const firebaseConfig = {
    apiKey: "AIzaSyDb_q-2SL_x-Xj4aBrpN4D57N7zMgQmYjw",
    authDomain: "camara-ipad.firebaseapp.com",
    projectId: "camara-ipad",
    storageBucket: "camara-ipad.firebasestorage.app",
    messagingSenderId: "891674821126",
    appId: "1:891674821126:web:c3cefb5dc4cbc5f08f7987"
  };
  const app = firebase.initializeApp(firebaseConfig);
  const db = firebase.firestore();

  // ========= UI refs =========
  const roleSel = document.getElementById('role');
  const roomInp = document.getElementById('room');
  const startBtn = document.getElementById('start');
  const stopBtn = document.getElementById('stop');
  const videoEl = document.getElementById('video');
  const camSel = document.getElementById('cameraSelect');
  const mirrorChk = document.getElementById('mirror');
  const sendAudioChk = document.getElementById('sendAudio');
  const emitterOpts = document.getElementById('emitterOpts');
  const shareUrl = document.getElementById('shareUrl');
  const statusEl = document.getElementById('status');

  const qs = new URLSearchParams(location.search);
  const urlRoom = qs.get('room') || '';
  const urlRole = qs.get('role') || '';
  if (urlRoom) roomInp.value = urlRoom;
  if (urlRole) roleSel.value = urlRole;

  function updateUI() {
    emitterOpts.style.display = (roleSel.value === 'emitter') ? 'flex' : 'none';
    const r = roomInp.value.trim() || 'sala-demo';
    const base = location.origin + location.pathname;
    shareUrl.textContent = `${base}?room=${encodeURIComponent(r)}&role=viewer`;
    videoEl.style.transform = (mirrorChk.checked && roleSel.value === 'emitter') ? 'scaleX(-1)' : 'none';
  }
  updateUI();
  roleSel.addEventListener('change', updateUI);
  roomInp.addEventListener('input', updateUI);
  mirrorChk.addEventListener('change', updateUI);

  // ========= Listar cámaras =========
  async function listCams() {
    try {
      await navigator.mediaDevices.getUserMedia({ video: true, audio: false });
      const devices = await navigator.mediaDevices.enumerateDevices();
      const cams = devices.filter(d => d.kind === 'videoinput');
      camSel.innerHTML = '';
      cams.forEach((c, i) => {
        const opt = document.createElement('option');
        opt.value = c.deviceId;
        opt.textContent = c.label || `Cámara ${i+1}`;
        camSel.appendChild(opt);
      });
    } catch(e) { console.error(e); }
  }
  if (roleSel.value === 'emitter') listCams();
  roleSel.addEventListener('change', () => { if (roleSel.value==='emitter') listCams(); });

  // ========= WebRTC =========
  let pc=null, roomDoc=null, callerCandidates=null, calleeCandidates=null, remoteStream=null, localStream=null, stopped=false;
  const iceServers = [{ urls: ['stun:stun.l.google.com:19302','stun:stun1.l.google.com:19302'] }];

  async function start() {
    stopped=false; startBtn.disabled=true; stopBtn.disabled=false;
    const role = roleSel.value;
    const roomId = (roomInp.value.trim()||'sala-demo').toLowerCase();
    videoEl.muted = (role==='emitter');
    pc = new RTCPeerConnection({ iceServers });
    remoteStream = new MediaStream();
    videoEl.srcObject = remoteStream;
    pc.addEventListener('track', e => { e.streams[0].getTracks().forEach(t=>remoteStream.addTrack(t)); });

    if (role==='emitter') {
      const vConstraints = camSel.value ? {deviceId:{exact:camSel.value}} : {facingMode:'environment'};
      localStream = await navigator.mediaDevices.getUserMedia({ video:vConstraints, audio:!!sendAudioChk.checked });
      localStream.getTracks().forEach(t => pc.addTrack(t, localStream));
      if (remoteStream.getTracks().length===0) videoEl.srcObject=localStream;
    }

    roomDoc = db.collection('rooms').doc(roomId);
    callerCandidates = roomDoc.collection('callerCandidates');
    calleeCandidates = roomDoc.collection('calleeCandidates');
    pc.onicecandidate = async e => { if(e.candidate&&!stopped){ const col=(role==='emitter')?callerCandidates:calleeCandidates; await col.add(e.candidate.toJSON()); } };

    if (role==='emitter') {
      const offer = await pc.createOffer({ offerToReceiveAudio:true, offerToReceiveVideo:true });
      await pc.setLocalDescription(offer);
      await roomDoc.set({ offer:{type:offer.type,sdp:offer.sdp}, createdAt:Date.now() });
      roomDoc.onSnapshot(async snap => {
        const data=snap.data(); if(!pc.currentRemoteDescription&&data&&data.answer){
          await pc.setRemoteDescription(new RTCSessionDescription(data.answer));
          statusEl.innerHTML='<span class="ok">Conectado (recibida answer).</span>';
        }
      });
      calleeCandidates.onSnapshot(snap => snap.docChanges().forEach(ch=>{
        if(ch.type==='added'){ pc.addIceCandidate(new RTCIceCandidate(ch.doc.data())); }
      }));
      statusEl.textContent='Oferta enviada. Esperando Viewer...';
    } else {
      const snap=await roomDoc.get();
      if(!snap.exists||!snap.data().offer){ statusEl.innerHTML='<span class="warn">No hay oferta aún, inicia Emisor primero.</span>'; startBtn.disabled=false; stopBtn.disabled=true; return; }
      const offer=snap.data().offer;
      await pc.setRemoteDescription(new RTCSessionDescription(offer));
      const answer=await pc.createAnswer(); await pc.setLocalDescription(answer);
      await roomDoc.update({ answer:{type:answer.type,sdp:answer.sdp}, answeredAt:Date.now() });
      callerCandidates.onSnapshot(snap2=>snap2.docChanges().forEach(ch=>{
        if(ch.type==='added'){ pc.addIceCandidate(new RTCIceCandidate(ch.doc.data())); }
      }));
      statusEl.innerHTML='<span class="ok">Conectado (enviado answer).</span>';
    }
  }
  async function stop() {
    stopped=true; startBtn.disabled=false; stopBtn.disabled=true;
    try{pc&&pc.getSenders().forEach(s=>s.track&&s.track.stop());}catch{}
    try{localStream&&localStream.getTracks().forEach(t=>t.stop());}catch{}
    try{pc&&pc.close();}catch{} pc=null; videoEl.srcObject=null;
    statusEl.innerHTML='<span class="ok">Sesión detenida.</span>';
  }
  startBtn.addEventListener('click', start);
  stopBtn.addEventListener('click', stop);
  document.body.addEventListener('click',()=>{ if(videoEl&&videoEl.paused) videoEl.play().catch(()=>{}); },{once:true});
  updateUI();
})();
</script>
</body>
</html>
